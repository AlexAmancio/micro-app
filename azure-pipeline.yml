name: .NET App CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: "Select deployment environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod
          - both

env:
  BUILD_CONFIGURATION: Release
  DOTNET_VERSION: '8.x'
  DEV_APP_SERVICE_NAME: 'helloworld-dev-micro-app'
  PROD_APP_SERVICE_NAME: 'helloworld-prod-micro-app'

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      artifact-name: ${{ steps.set-artifact.outputs.artifact-name }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: List directory structure (debug)
        run: |
          echo "=== Repository root ==="
          ls -la
          echo "=== Source directory ==="
          if [ -d "source" ]; then
            ls -la source/
          else
            echo "source/ directory not found"
          fi
          echo "=== Test directory ==="
          if [ -d "test" ]; then
            ls -la test/
          else
            echo "test/ directory not found"
          fi

      - name: Restore NuGet packages
        run: |
          echo "🔍 Buscando archivo .sln o .csproj en source/ para restaurar..."

          sln_file=$(find source -maxdepth 1 -name "*.sln" | head -n 1)
          proj_file=$(find source -maxdepth 1 -name "*.csproj" | head -n 1)

          if [ -n "$sln_file" ]; then
            echo "✅ Se encontró archivo de solución: $sln_file"
            dotnet restore "$sln_file"
          elif [ -n "$proj_file" ]; then
            echo "✅ Se encontró archivo de proyecto: $proj_file"
            dotnet restore "$proj_file"
          else
            echo "❌ No se encontró archivo .sln ni .csproj en source/"
            exit 1
          fi

          if [ -d "test" ] && [ "$(ls -A test/ 2>/dev/null)" ]; then
            echo "🔄 Restaurando paquetes de proyectos de prueba..."
            find test -name "*.csproj" -exec dotnet restore {} \;
          else
            echo "ℹ️ No se encontraron proyectos de prueba"
          fi

      - name: Build the project
        run: |
          echo "🏗️ Construyendo proyecto principal..."

          sln_file=$(find source -maxdepth 1 -name "*.sln" | head -n 1)
          proj_file=$(find source -maxdepth 1 -name "*.csproj" | head -n 1)

          if [ -n "$sln_file" ]; then
            echo "🧱 Construyendo solución: $sln_file"
            dotnet build "$sln_file" --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
          elif [ -n "$proj_file" ]; then
            echo "🧱 Construyendo proyecto: $proj_file"
            dotnet build "$proj_file" --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore
          else
            echo "❌ No se encontró archivo .sln ni .csproj para construir"
            exit 1
          fi

          if [ -d "test" ] && [ "$(ls -A test/ 2>/dev/null)" ]; then
            echo "🏗️ Construyendo proyectos de prueba..."
            find test -name "*.csproj" -exec dotnet build {} --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore \;
          else
            echo "ℹ️ No se encontraron proyectos de prueba para construir"
          fi

      - name: Run unit tests
        run: |
          if [ -d "test" ] && [ "$(ls -A test/ 2>/dev/null)" ]; then
            echo "🧪 Ejecutando pruebas unitarias..."
            find t
